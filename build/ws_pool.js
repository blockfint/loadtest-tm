"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initialize = initialize;
exports.connect = connect;
exports.getConnection = getConnection;
exports.closeAllConnections = closeAllConnections;

var _ws_client = _interopRequireDefault(require("./ws_client"));

/**
 * Copyright (c) 2018, 2019 National Digital ID COMPANY LIMITED
 *
 * This file is part of NDID software.
 *
 * NDID is the free software: you can redistribute it and/or modify it under
 * the terms of the Affero GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or any later
 * version.
 *
 * NDID is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the Affero GNU General Public License for more details.
 *
 * You should have received a copy of the Affero GNU General Public License
 * along with the NDID source code. If not, see https://www.gnu.org/licenses/agpl.txt.
 *
 * Please contact info@ndid.co.th for any further questions
 *
 */
// import logger from '../logger';
let tendermintWsConnections = 1; // import logger from '../logger';
// import CustomError from 'ndid-error/custom_error';
// import * as config from '../config';

/**
 * @type {Array.<TendermintWsClient>}
 */

const wsClients = [];
let wsClientIndex = 0;

function connectWS(wsClient) {
  return new Promise(resolve => {
    wsClient.once('connected', () => resolve());
    wsClient.connect();
  });
}

async function initialize(connect = true) {
  const promises = [];

  for (let i = 0; i < tendermintWsConnections; i++) {
    const tendermintWsClient = new _ws_client.default(`ws_pool_${i}`, false);
    wsClients.push(tendermintWsClient);

    if (connect) {
      promises.push(connectWS(tendermintWsClient));
    }
  }

  if (connect) {
    await Promise.all(promises);
  }
}

async function connect() {
  const promises = [];

  for (let i = 0; i < wsClients.length; i++) {
    promises.push(connectWS(wsClients[i]));
  }

  await Promise.all(promises);
}

function getNextConnectedConnectionClientIndex(curentIndex) {
  for (let i = curentIndex; i < wsClients.length; i++) {
    if (wsClients[i].connected) {
      return i;
    }
  }

  if (curentIndex !== 0) {
    for (let i = 0; i < curentIndex; i++) {
      if (wsClients[i].connected) {
        return i;
      }
    }
  }

  return null;
} // Round-robin


function getConnection() {
  wsClientIndex++;

  if (wsClientIndex >= wsClients.length) {
    wsClientIndex = 0;
  }

  if (!wsClients[wsClientIndex].connected) {
    const nextConnectedConnectionClientIndex = getNextConnectedConnectionClientIndex(wsClientIndex);

    if (nextConnectedConnectionClientIndex == null) {
      throw 'No connected WS available'; // throw new CustomError({
      //   message: 'No connected WS available',
      // });
    }
  }

  return wsClients[wsClientIndex];
}

function closeAllConnections() {
  for (let i = 0; i < wsClients.length; i++) {
    wsClients[i].close();
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy93c19wb29sLmpzIl0sIm5hbWVzIjpbInRlbmRlcm1pbnRXc0Nvbm5lY3Rpb25zIiwid3NDbGllbnRzIiwid3NDbGllbnRJbmRleCIsImNvbm5lY3RXUyIsIndzQ2xpZW50IiwiUHJvbWlzZSIsInJlc29sdmUiLCJvbmNlIiwiY29ubmVjdCIsImluaXRpYWxpemUiLCJwcm9taXNlcyIsImkiLCJ0ZW5kZXJtaW50V3NDbGllbnQiLCJUZW5kZXJtaW50V3NDbGllbnQiLCJwdXNoIiwiYWxsIiwibGVuZ3RoIiwiZ2V0TmV4dENvbm5lY3RlZENvbm5lY3Rpb25DbGllbnRJbmRleCIsImN1cmVudEluZGV4IiwiY29ubmVjdGVkIiwiZ2V0Q29ubmVjdGlvbiIsIm5leHRDb25uZWN0ZWRDb25uZWN0aW9uQ2xpZW50SW5kZXgiLCJjbG9zZUFsbENvbm5lY3Rpb25zIiwiY2xvc2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQXFCQTs7QUFyQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVCQTtBQUVBLElBQUlBLHVCQUF1QixHQUFHLENBQTlCLEMsQ0FFQTtBQUVBO0FBRUE7O0FBRUE7Ozs7QUFHQSxNQUFNQyxTQUFTLEdBQUcsRUFBbEI7QUFFQSxJQUFJQyxhQUFhLEdBQUcsQ0FBcEI7O0FBRUEsU0FBU0MsU0FBVCxDQUFtQkMsUUFBbkIsRUFBNkI7QUFDM0IsU0FBTyxJQUFJQyxPQUFKLENBQVlDLE9BQU8sSUFBSTtBQUM1QkYsSUFBQUEsUUFBUSxDQUFDRyxJQUFULENBQWMsV0FBZCxFQUEyQixNQUFNRCxPQUFPLEVBQXhDO0FBQ0FGLElBQUFBLFFBQVEsQ0FBQ0ksT0FBVDtBQUNELEdBSE0sQ0FBUDtBQUlEOztBQUVNLGVBQWVDLFVBQWYsQ0FBMEJELE9BQU8sR0FBRyxJQUFwQyxFQUEwQztBQUMvQyxRQUFNRSxRQUFRLEdBQUcsRUFBakI7O0FBQ0EsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHWCx1QkFBcEIsRUFBNkNXLENBQUMsRUFBOUMsRUFBa0Q7QUFDaEQsVUFBTUMsa0JBQWtCLEdBQUcsSUFBSUMsa0JBQUosQ0FBd0IsV0FBVUYsQ0FBRSxFQUFwQyxFQUF1QyxLQUF2QyxDQUEzQjtBQUNBVixJQUFBQSxTQUFTLENBQUNhLElBQVYsQ0FBZUYsa0JBQWY7O0FBQ0EsUUFBSUosT0FBSixFQUFhO0FBQ1hFLE1BQUFBLFFBQVEsQ0FBQ0ksSUFBVCxDQUFjWCxTQUFTLENBQUNTLGtCQUFELENBQXZCO0FBQ0Q7QUFDRjs7QUFDRCxNQUFJSixPQUFKLEVBQWE7QUFDWCxVQUFNSCxPQUFPLENBQUNVLEdBQVIsQ0FBWUwsUUFBWixDQUFOO0FBQ0Q7QUFDRjs7QUFFTSxlQUFlRixPQUFmLEdBQXlCO0FBQzlCLFFBQU1FLFFBQVEsR0FBRyxFQUFqQjs7QUFDQSxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdWLFNBQVMsQ0FBQ2UsTUFBOUIsRUFBc0NMLENBQUMsRUFBdkMsRUFBMkM7QUFDekNELElBQUFBLFFBQVEsQ0FBQ0ksSUFBVCxDQUFjWCxTQUFTLENBQUNGLFNBQVMsQ0FBQ1UsQ0FBRCxDQUFWLENBQXZCO0FBQ0Q7O0FBQ0QsUUFBTU4sT0FBTyxDQUFDVSxHQUFSLENBQVlMLFFBQVosQ0FBTjtBQUNEOztBQUVELFNBQVNPLHFDQUFULENBQStDQyxXQUEvQyxFQUE0RDtBQUMxRCxPQUFLLElBQUlQLENBQUMsR0FBR08sV0FBYixFQUEwQlAsQ0FBQyxHQUFHVixTQUFTLENBQUNlLE1BQXhDLEVBQWdETCxDQUFDLEVBQWpELEVBQXFEO0FBQ25ELFFBQUlWLFNBQVMsQ0FBQ1UsQ0FBRCxDQUFULENBQWFRLFNBQWpCLEVBQTRCO0FBQzFCLGFBQU9SLENBQVA7QUFDRDtBQUNGOztBQUNELE1BQUlPLFdBQVcsS0FBSyxDQUFwQixFQUF1QjtBQUNyQixTQUFLLElBQUlQLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdPLFdBQXBCLEVBQWlDUCxDQUFDLEVBQWxDLEVBQXNDO0FBQ3BDLFVBQUlWLFNBQVMsQ0FBQ1UsQ0FBRCxDQUFULENBQWFRLFNBQWpCLEVBQTRCO0FBQzFCLGVBQU9SLENBQVA7QUFDRDtBQUNGO0FBQ0Y7O0FBQ0QsU0FBTyxJQUFQO0FBQ0QsQyxDQUVEOzs7QUFDTyxTQUFTUyxhQUFULEdBQXlCO0FBQzlCbEIsRUFBQUEsYUFBYTs7QUFDYixNQUFJQSxhQUFhLElBQUlELFNBQVMsQ0FBQ2UsTUFBL0IsRUFBdUM7QUFDckNkLElBQUFBLGFBQWEsR0FBRyxDQUFoQjtBQUNEOztBQUNELE1BQUksQ0FBQ0QsU0FBUyxDQUFDQyxhQUFELENBQVQsQ0FBeUJpQixTQUE5QixFQUF5QztBQUN2QyxVQUFNRSxrQ0FBa0MsR0FBR0oscUNBQXFDLENBQzlFZixhQUQ4RSxDQUFoRjs7QUFHQSxRQUFJbUIsa0NBQWtDLElBQUksSUFBMUMsRUFBZ0Q7QUFDOUMsWUFBTSwyQkFBTixDQUQ4QyxDQUU5QztBQUNBO0FBQ0E7QUFDRDtBQUNGOztBQUNELFNBQU9wQixTQUFTLENBQUNDLGFBQUQsQ0FBaEI7QUFDRDs7QUFFTSxTQUFTb0IsbUJBQVQsR0FBK0I7QUFDcEMsT0FBSyxJQUFJWCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHVixTQUFTLENBQUNlLE1BQTlCLEVBQXNDTCxDQUFDLEVBQXZDLEVBQTJDO0FBQ3pDVixJQUFBQSxTQUFTLENBQUNVLENBQUQsQ0FBVCxDQUFhWSxLQUFiO0FBQ0Q7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE4LCAyMDE5IE5hdGlvbmFsIERpZ2l0YWwgSUQgQ09NUEFOWSBMSU1JVEVEXG4gKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgTkRJRCBzb2Z0d2FyZS5cbiAqXG4gKiBORElEIGlzIHRoZSBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5IGl0IHVuZGVyXG4gKiB0aGUgdGVybXMgb2YgdGhlIEFmZmVybyBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlXG4gKiBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yIGFueSBsYXRlclxuICogdmVyc2lvbi5cbiAqXG4gKiBORElEIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLlxuICogU2VlIHRoZSBBZmZlcm8gR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBBZmZlcm8gR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggdGhlIE5ESUQgc291cmNlIGNvZGUuIElmIG5vdCwgc2VlIGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuXG4gKlxuICogUGxlYXNlIGNvbnRhY3QgaW5mb0BuZGlkLmNvLnRoIGZvciBhbnkgZnVydGhlciBxdWVzdGlvbnNcbiAqXG4gKi9cbmltcG9ydCBUZW5kZXJtaW50V3NDbGllbnQgZnJvbSAnLi93c19jbGllbnQnO1xuXG4vLyBpbXBvcnQgbG9nZ2VyIGZyb20gJy4uL2xvZ2dlcic7XG5cbmxldCB0ZW5kZXJtaW50V3NDb25uZWN0aW9ucyA9IDE7XG5cbi8vIGltcG9ydCBsb2dnZXIgZnJvbSAnLi4vbG9nZ2VyJztcblxuLy8gaW1wb3J0IEN1c3RvbUVycm9yIGZyb20gJ25kaWQtZXJyb3IvY3VzdG9tX2Vycm9yJztcblxuLy8gaW1wb3J0ICogYXMgY29uZmlnIGZyb20gJy4uL2NvbmZpZyc7XG5cbi8qKlxuICogQHR5cGUge0FycmF5LjxUZW5kZXJtaW50V3NDbGllbnQ+fVxuICovXG5jb25zdCB3c0NsaWVudHMgPSBbXTtcblxubGV0IHdzQ2xpZW50SW5kZXggPSAwO1xuXG5mdW5jdGlvbiBjb25uZWN0V1Mod3NDbGllbnQpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgIHdzQ2xpZW50Lm9uY2UoJ2Nvbm5lY3RlZCcsICgpID0+IHJlc29sdmUoKSk7XG4gICAgd3NDbGllbnQuY29ubmVjdCgpO1xuICB9KTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXRpYWxpemUoY29ubmVjdCA9IHRydWUpIHtcbiAgY29uc3QgcHJvbWlzZXMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZW5kZXJtaW50V3NDb25uZWN0aW9uczsgaSsrKSB7XG4gICAgY29uc3QgdGVuZGVybWludFdzQ2xpZW50ID0gbmV3IFRlbmRlcm1pbnRXc0NsaWVudChgd3NfcG9vbF8ke2l9YCwgZmFsc2UpO1xuICAgIHdzQ2xpZW50cy5wdXNoKHRlbmRlcm1pbnRXc0NsaWVudCk7XG4gICAgaWYgKGNvbm5lY3QpIHtcbiAgICAgIHByb21pc2VzLnB1c2goY29ubmVjdFdTKHRlbmRlcm1pbnRXc0NsaWVudCkpO1xuICAgIH1cbiAgfVxuICBpZiAoY29ubmVjdCkge1xuICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29ubmVjdCgpIHtcbiAgY29uc3QgcHJvbWlzZXMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB3c0NsaWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBwcm9taXNlcy5wdXNoKGNvbm5lY3RXUyh3c0NsaWVudHNbaV0pKTtcbiAgfVxuICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59XG5cbmZ1bmN0aW9uIGdldE5leHRDb25uZWN0ZWRDb25uZWN0aW9uQ2xpZW50SW5kZXgoY3VyZW50SW5kZXgpIHtcbiAgZm9yIChsZXQgaSA9IGN1cmVudEluZGV4OyBpIDwgd3NDbGllbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHdzQ2xpZW50c1tpXS5jb25uZWN0ZWQpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuICBpZiAoY3VyZW50SW5kZXggIT09IDApIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cmVudEluZGV4OyBpKyspIHtcbiAgICAgIGlmICh3c0NsaWVudHNbaV0uY29ubmVjdGVkKSB7XG4gICAgICAgIHJldHVybiBpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLy8gUm91bmQtcm9iaW5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb25uZWN0aW9uKCkge1xuICB3c0NsaWVudEluZGV4Kys7XG4gIGlmICh3c0NsaWVudEluZGV4ID49IHdzQ2xpZW50cy5sZW5ndGgpIHtcbiAgICB3c0NsaWVudEluZGV4ID0gMDtcbiAgfVxuICBpZiAoIXdzQ2xpZW50c1t3c0NsaWVudEluZGV4XS5jb25uZWN0ZWQpIHtcbiAgICBjb25zdCBuZXh0Q29ubmVjdGVkQ29ubmVjdGlvbkNsaWVudEluZGV4ID0gZ2V0TmV4dENvbm5lY3RlZENvbm5lY3Rpb25DbGllbnRJbmRleChcbiAgICAgIHdzQ2xpZW50SW5kZXhcbiAgICApO1xuICAgIGlmIChuZXh0Q29ubmVjdGVkQ29ubmVjdGlvbkNsaWVudEluZGV4ID09IG51bGwpIHtcbiAgICAgIHRocm93ICdObyBjb25uZWN0ZWQgV1MgYXZhaWxhYmxlJztcbiAgICAgIC8vIHRocm93IG5ldyBDdXN0b21FcnJvcih7XG4gICAgICAvLyAgIG1lc3NhZ2U6ICdObyBjb25uZWN0ZWQgV1MgYXZhaWxhYmxlJyxcbiAgICAgIC8vIH0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gd3NDbGllbnRzW3dzQ2xpZW50SW5kZXhdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xvc2VBbGxDb25uZWN0aW9ucygpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB3c0NsaWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB3c0NsaWVudHNbaV0uY2xvc2UoKTtcbiAgfVxufVxuIl19